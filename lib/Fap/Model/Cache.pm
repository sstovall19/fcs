package Fap::Model::Cache;
use strict;
use Data::MessagePack;
use Fap;
use Fap::Model::Cache::Memory;
use Fap::Model::Cache::File;
use Storable;

sub new {
    my ( $class, %args ) = @_;

    my $self = bless {
        backend => undef,
        packer  => Data::MessagePack->new(),
        conf    => $args{conf},
    }, $class;

    if ( $args{type} eq "file" ) {
        $self->{backend} = Fap::Model::Cache::File->new( $self->{conf} );
    } else {
        $self->{backend} = Fap::Model::Cache::Memory->new( $self->{conf} );
    }
    return $self;
}

sub memory {
    my ( $class, %args ) = @_;

    return $class->new(%args);
}

sub file {
    my ( $class, %args ) = @_;

    $args{type} = "file";
    return $class->new(%args);
}

sub get {
    my ( $self, $key ) = @_;

    my $v = $self->backend->get($key);
    return $v;
}

sub get_storable {
	my ($self, $key ) = @_;

    my $v = $self->backend->get($key);
    if ($v) {
	return Storable::thaw($v);
    }
	return undef;
}



sub getCount {
    my ( $self, $key ) = @_;

    return $self->backend->get($key) || 0;
}

sub setCount {
    my ( $self, $key, $expires ) = @_;

    return $self->backend->set( $key, $expires );
}

sub increment {
    my ( $self, $key, $by ) = @_;

    return $self->backend->increment( $key, $by || 1 );
}

sub decrement {
    my ( $self, $key, $by ) = @_;

    return $self->backend->decrement( $key, $by || 1 );
}

sub set {
    my ( $self, $key, $data, $expires ) = @_;

    $self->backend->set($key,$data,$expires);
}

sub set_storable {
    my ( $self, $key, $data, $expires ) = @_;

    my $packed = Storable::nfreeze($data);
    $self->backend->set( $key, $packed );
}

sub delete {
    my ( $self, $key ) = @_;

    $self->backend->delete($key);
}

sub backend {
    return shift->{backend};
}

sub packer {
    return shift->{packer};
}

1;

#################### pod generated by Pod::Autopod - keep this line to make pod updates possible ####################

=head1 NAME

Fap::Model::Cache


=head1 REQUIRES

L<Fap::Model::Cache::File> 

L<Fap::Model::Cache::Memory> 

L<Fap> 

L<Data::MessagePack> 


=head1 METHODS

=head2 new

 $this->new();

=head2 backend

 $this->backend();

=head2 decrement

 $this->decrement();

=head2 delete

 $this->delete();

=head2 file

 $this->file();

=head2 get

 $this->get();

=head2 getCount

 $this->getCount();

=head2 increment

 $this->increment();

=head2 memory

 $this->memory();

=head2 packer

 $this->packer();

=head2 set

 $this->set();

=head2 setCount

 $this->setCount();


=cut

