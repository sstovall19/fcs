package com.fonality.service;

/*********************************************************************************
 * Copyright (C) 2012 Fonality. All Rights Reserved.
 *
 * Filename:      CdrUsageService.java
 * Revision:      1.0
 * Author:        Satya Boddu
 * Created On:    Jan 21, 2013
 * Modified by:   
 * Modified On:   
 *
 * Description:   Service class to perform operations on cdr usage data like generating jasper report, 
 * 					sending email to customer, etc 
 *
 ********************************************************************************/

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import net.sf.jasperreports.engine.JRParameter;
import net.sf.jasperreports.engine.util.SimpleFileResolver;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.fonality.billing.DTO.BillableCdrDTO;
import com.fonality.billing.DTO.CallTypeCdrDTO;
import com.fonality.billing.DTO.ServerCdrUsageDTO;
import com.fonality.billing.service.CdrService;
import com.fonality.bu.entity.BillingSchedule;
import com.fonality.bu.entity.OrderGroup;
import com.fonality.dao.OrderGroupDAO;
import com.fonality.search.CdrUsageVO;
import com.fonality.service.common.JasperReportService;
import com.fonality.util.FSPConstants;
import com.fonality.util.ObjectUtils;

@Service
@Transactional
public class CdrUsageService {

	@Autowired
	JasperReportService jasperReportService;

	@Autowired
	public OrderGroupDAO orderGroupDAO;

	@Autowired
	public CdrService cdrService;

	@Autowired
	EmailService emailService;

	private static Map<String, String> formattedTypesMap = null;

	private static final Logger LOGGER = Logger.getLogger(CdrUsageService.class.getName());

	public CdrUsageService() {
		this.initializeTypeMap();
	}

	/**
	 * Generated cdr usage report based on billing schedule
	 * 
	 * @param billingSchedule
	 */
	public byte[] generateCdrUsageReport(BillingSchedule billingSchedule,
			List<ServerCdrUsageDTO> serverCdrUsageList) throws Exception {
		byte[] reportData = null;

		if (ObjectUtils.isValid(serverCdrUsageList)) {
			Map<String, Object> parameterMap = initParameterMap(billingSchedule, serverCdrUsageList);
			reportData = jasperReportService.generateJasperOutput(parameterMap);

			if (reportData == null) {
				LOGGER.warn("Usage report content generated by jasper is null: ");
			}
		} else {
			LOGGER.warn("Billable cdr list is empty");
		}

		return reportData;

	}

	/**
	 * Email cdr usage report based on cdrUsageVO
	 * 
	 * @param cdrUsageVO
	 */
	public String emailCdrUsageReport(CdrUsageVO cdrUsageVO) {
		String retVal = null;
		try {
			// Add code to set customer data like firstName, lastName, emailAddress
			BillingSchedule billingSchedule = new BillingSchedule();
			billingSchedule.setStartDate(cdrUsageVO.getStartDate());
			billingSchedule.setEndDate(cdrUsageVO.getEndDate());
			List<ServerCdrUsageDTO> serverUsageDTOList = new ArrayList<ServerCdrUsageDTO>();

			try {
				List<Integer> serverIdList = new ArrayList<Integer>();
				/*
				 * Adding hard coded server id list, as we need multiple db config support to get
				 * customer associated server id's from pbXtra DB
				 */
				serverIdList.add(16110);
				//serverIdList.add(19788);
				//serverIdList.add(18481);
				//serverIdList.add(18274);

				if (ObjectUtils.isValid(serverIdList)) {
					for (Integer serverId : serverIdList) {
						OrderGroup orderGroup = this.orderGroupDAO.loadOrderGroupByserver(serverId);
						ServerCdrUsageDTO serverCdrUsageDTO = new ServerCdrUsageDTO(
								orderGroup.getOrderGroupId());

						if (!serverUsageDTOList.contains(serverCdrUsageDTO)) {
							serverCdrUsageDTO = this.getBillableCdr(orderGroup, billingSchedule);
							if (serverCdrUsageDTO != null) {
								serverUsageDTOList.add(serverCdrUsageDTO);
							}
						}

					}
				} else {
					LOGGER.error("Server Id List is empty for the customer: "
							+ cdrUsageVO.getCustomerId());
					retVal = "Server Id List is empty for the customer: "
							+ cdrUsageVO.getCustomerId();
				}

			} catch (Exception exc) {
				LOGGER.error("Error occurred in creating serverCdrUsageDTOList", exc);
				retVal = ("Error occurred in creating  serverCdrUsageDTOList \n " + exc
						.getLocalizedMessage());
			}

			LOGGER.info("ServerUsageDTOList Size: " + serverUsageDTOList.size());
			if (retVal == null) {
				byte[] reportData = null;
				try {
					/* Generate report contents using jasper service */
					reportData = this.generateCdrUsageReport(billingSchedule, serverUsageDTOList);
				} catch (Exception exc) {
					LOGGER.error("Error occurred in generating customer usage report", exc);
					retVal = ("Error occurred in generating customer usage report \n " + exc
							.getLocalizedMessage());
				}

				if (reportData != null) {
					emailService.sendCustomerCdrUsageEmail(reportData, cdrUsageVO);
				}
			}

		} catch (Exception exc) {
			LOGGER.error("Error occurred in sending cdr usage email", exc);
			retVal = ("Error occurred in sending cdr usage email \n " + exc.getLocalizedMessage());
		}

		return retVal;

	}

	/**
	 * Method to initialize jasper report parameter map
	 * 
	 * @param billingSchedule
	 * @return parameterMap
	 */
	@SuppressWarnings("deprecation")
	private Map<String, Object> initParameterMap(BillingSchedule billingSchedule,
			List<ServerCdrUsageDTO> serverCdrUsageList) {
		Map<String, Object> parameterMap = new HashMap<String, Object>();
		try {
			/*
			 * Set required parameters to jasper report like server id, start date, end date, etc
			 */
			parameterMap.put(FSPConstants.START_DATE_PARAM, billingSchedule.getStartDate());
			parameterMap.put(FSPConstants.END_DATE_PARAM, billingSchedule.getEndDate());
			parameterMap.put(FSPConstants.SERVER_CDR_LIST_PARAM, serverCdrUsageList);

			parameterMap.put(FSPConstants.CDR_USAGE_SERVER_REPORT_PARAM,
					this.getReportStream(FSPConstants.CDR_USAGE_SERVER_REPORT_PATH));
			parameterMap.put(FSPConstants.CDR_USAGE_SUMMARY_REPORT_PARAM,
					this.getReportStream(FSPConstants.CDR_USAGE_SUMMARY_REPORT_PATH));
			parameterMap.put(FSPConstants.CDR_USAGE_SERVER_SUMMARY_REPORT_PARAM,
					this.getReportStream(FSPConstants.CDR_USAGE_SERVER_SUMMARY_REPORT_PATH));

			File reportsDir = new File(FSPConstants.REPORT_DIR);
			parameterMap.put(JRParameter.REPORT_FILE_RESOLVER, new SimpleFileResolver(reportsDir));
			parameterMap.put(FSPConstants.CDR_USAGE_HEADER_LOGO_PATH_PARAM,
					getImageStream(FSPConstants.CDR_USAGE_HEADER_LOGO_PATH));

			parameterMap.put(FSPConstants.REPORT_PATH_PARAM, FSPConstants.CDR_USAGE_REPORT_PATH);

			parameterMap.put(FSPConstants.CALL_TYPE_SUMMARY_PARAM,
					this.getUsageSummary(serverCdrUsageList));

		} catch (Exception exc) {
			LOGGER.error("Error occurred in sending cdr usage email", exc);
		}

		return parameterMap;

	}

	/**
	 * Method to get the image inputStream based on the image path
	 * 
	 * @param imagePath
	 * @return imageStream
	 */
	private InputStream getImageStream(String imagePath) throws FileNotFoundException {
		InputStream imageStream = getClass().getResourceAsStream(imagePath);

		if (imageStream == null) {
			imageStream = new FileInputStream(imagePath.substring(1));
		}

		return imageStream;
	}

	/**
	 * Method to get billable cdr list by serverId
	 * 
	 * @return cdrList
	 */
	public ServerCdrUsageDTO getBillableCdr(OrderGroup orderGroup, BillingSchedule billingSchedule) {
		ServerCdrUsageDTO serverCdrUsageDTO = null;
		if (billingSchedule != null) {
			try {
				/* Call cdrService to get billable cdr data */
				HashMap<String, Integer> hmUsage = new HashMap<String, Integer>();
				HashMap<String, BigDecimal> hmAmount = new HashMap<String, BigDecimal>();
				List<BillableCdrDTO> cdrList = this.cdrService.getBillableCDR(
						orderGroup.getServerId(), billingSchedule, hmUsage, hmAmount);

				if (ObjectUtils.isValid(cdrList)) {

					serverCdrUsageDTO = new ServerCdrUsageDTO(orderGroup.getOrderGroupId());
					serverCdrUsageDTO.setAddr1(orderGroup.getEntityAddressByShippingAddressId()
							.getAddr1());
					serverCdrUsageDTO.setServerId(orderGroup.getServerId());
					serverCdrUsageDTO.setBillableCdrList(cdrList);
					for (String callType : formattedTypesMap.keySet()) {
						serverCdrUsageDTO.addCallTypeCdr(new CallTypeCdrDTO(formattedTypesMap
								.get(callType), (hmAmount.containsKey(callType) ? hmAmount
								.get(callType) : BigDecimal.ZERO),
								(hmUsage.containsKey(callType) ? hmUsage.get(callType) : 0)));
					}

				}
			} catch (Exception exc) {
				LOGGER.warn("Error occurred in getting billable cdr records", exc);
			}
		}

		return serverCdrUsageDTO;
	}

	/**
	 * Method to get subreport stream
	 * 
	 * @return reportStream
	 */
	private InputStream getReportStream(String reportPath) throws FileNotFoundException {
		InputStream reportStream = getClass().getResourceAsStream(reportPath);

		if (reportStream == null) {
			reportStream = new FileInputStream(reportPath.substring(1));
		}

		return reportStream;
	}

	/**
	 * Initializes the map wit formatted types
	 */
	public void initializeTypeMap() {
		if (!ObjectUtils.isValid(formattedTypesMap)) {
			formattedTypesMap = new HashMap<String, String>();

			formattedTypesMap.put(FSPConstants.BUNDLE_INTERNATIONAL_STD_USAGE,
					FSPConstants.INTERNATIONAL_STD_TYPE);
			formattedTypesMap.put(FSPConstants.BUNDLE_INTERNATIONAL_MOBILE_USAGE,
					FSPConstants.INTERNATIONAL_MOBILE_TYPE);
			formattedTypesMap.put(FSPConstants.BUNDLE_PREMIUM_USAGE, FSPConstants.PREMIUM_TYPE);
			formattedTypesMap.put(FSPConstants.BUNDLE_TOLLFREE_USAGE, FSPConstants.TOLLFREE_TYPE);
			formattedTypesMap.put(FSPConstants.BUNDLE_EMERGENCY_USAGE, FSPConstants.EMERGENCY_TYPE);
			formattedTypesMap.put(FSPConstants.BUNDLE_STANDARD_MOBILE_USAGE,
					FSPConstants.STANDARD_TYPE);
		}

	}

	/**
	 * Method to get subreport stream
	 * 
	 * @return reportStream
	 */
	private List<CallTypeCdrDTO> getUsageSummary(List<ServerCdrUsageDTO> serverCdrUsageList)
			throws FileNotFoundException {
		List<CallTypeCdrDTO> callTypeSummaryList = new ArrayList<CallTypeCdrDTO>();

		if (ObjectUtils.isValid(serverCdrUsageList)) {
			for (ServerCdrUsageDTO serverCdrUsage : serverCdrUsageList) {
				for (CallTypeCdrDTO serverCallTypeCdr : serverCdrUsage.getCallTypeCdrList()) {
					CallTypeCdrDTO callTypeCdr = new CallTypeCdrDTO(serverCallTypeCdr.getCallType());

					if (callTypeSummaryList.contains(callTypeCdr)) {
						int index = callTypeSummaryList.indexOf(callTypeCdr);
						callTypeCdr = callTypeSummaryList.get(index);
						callTypeCdr.setBilledAmount(callTypeCdr.getBilledAmount().add(
								serverCallTypeCdr.getBilledAmount()));
						callTypeCdr.setDurationSum(callTypeCdr.getDurationSum()
								+ serverCallTypeCdr.getDurationSum());
						callTypeSummaryList.set(index, callTypeCdr);
					} else {
						callTypeCdr.setBilledAmount(serverCallTypeCdr.getBilledAmount());
						callTypeCdr.setDurationSum(serverCallTypeCdr.getDurationSum());
						callTypeSummaryList.add(callTypeCdr);
					}
				}

			}
		}

		return callTypeSummaryList;

	}

}
