package com.fonality.bu.entity;

// Generated Mar 21, 2013 12:26:07 PM by Hibernate Tools 3.4.0.CR1

import java.math.BigDecimal;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

/**
 * PromoCode generated by hbm2java
 */
@Entity
@Table(name = "promo_code", catalog = "fcs", uniqueConstraints = @UniqueConstraint(columnNames = "promo_code"))
public class PromoCode implements java.io.Serializable {

	private Integer promoCodeId;
	private Bundle bundle;
	private String promoCode;
	private String name;
	private String description;
	private Long netsuiteCampaignId;
	private String type;
	private Date startDate;
	private Date expireDate;
	private boolean isStackable;
	private boolean newBusinessOnly;
	private Integer termInMonths;
	private boolean forcePrepay;
	private BigDecimal prepayPercent;
	private int minUsers;
	private Integer maxUsers;
	private BigDecimal oneTimePrice;
	private BigDecimal mrcPrice;
	private Date created;
	private Date updated;
	private Set<PromoKit> promoKits = new HashSet<PromoKit>(0);
	private Set<PromoRole> promoRoles = new HashSet<PromoRole>(0);
	private Set<PromoAction> promoActions = new HashSet<PromoAction>(0);
	private Set<PromoDeployment> promoDeployments = new HashSet<PromoDeployment>(
			0);
	private Set<OrderDiscount> orderDiscounts = new HashSet<OrderDiscount>(0);

	public PromoCode() {
	}

	public PromoCode(String promoCode, String name, String description,
			String type, Date startDate, Date expireDate, boolean isStackable,
			boolean newBusinessOnly, boolean forcePrepay,
			BigDecimal prepayPercent, int minUsers, BigDecimal oneTimePrice,
			BigDecimal mrcPrice, Date created, Date updated) {
		this.promoCode = promoCode;
		this.name = name;
		this.description = description;
		this.type = type;
		this.startDate = startDate;
		this.expireDate = expireDate;
		this.isStackable = isStackable;
		this.newBusinessOnly = newBusinessOnly;
		this.forcePrepay = forcePrepay;
		this.prepayPercent = prepayPercent;
		this.minUsers = minUsers;
		this.oneTimePrice = oneTimePrice;
		this.mrcPrice = mrcPrice;
		this.created = created;
		this.updated = updated;
	}

	public PromoCode(Bundle bundle, String promoCode, String name,
			String description, Long netsuiteCampaignId, String type,
			Date startDate, Date expireDate, boolean isStackable,
			boolean newBusinessOnly, Integer termInMonths, boolean forcePrepay,
			BigDecimal prepayPercent, int minUsers, Integer maxUsers,
			BigDecimal oneTimePrice, BigDecimal mrcPrice, Date created,
			Date updated, Set<PromoKit> promoKits, Set<PromoRole> promoRoles,
			Set<PromoAction> promoActions,
			Set<PromoDeployment> promoDeployments,
			Set<OrderDiscount> orderDiscounts) {
		this.bundle = bundle;
		this.promoCode = promoCode;
		this.name = name;
		this.description = description;
		this.netsuiteCampaignId = netsuiteCampaignId;
		this.type = type;
		this.startDate = startDate;
		this.expireDate = expireDate;
		this.isStackable = isStackable;
		this.newBusinessOnly = newBusinessOnly;
		this.termInMonths = termInMonths;
		this.forcePrepay = forcePrepay;
		this.prepayPercent = prepayPercent;
		this.minUsers = minUsers;
		this.maxUsers = maxUsers;
		this.oneTimePrice = oneTimePrice;
		this.mrcPrice = mrcPrice;
		this.created = created;
		this.updated = updated;
		this.promoKits = promoKits;
		this.promoRoles = promoRoles;
		this.promoActions = promoActions;
		this.promoDeployments = promoDeployments;
		this.orderDiscounts = orderDiscounts;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "promo_code_id", unique = true, nullable = false)
	public Integer getPromoCodeId() {
		return this.promoCodeId;
	}

	public void setPromoCodeId(Integer promoCodeId) {
		this.promoCodeId = promoCodeId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "kit_user_bundle_id")
	public Bundle getBundle() {
		return this.bundle;
	}

	public void setBundle(Bundle bundle) {
		this.bundle = bundle;
	}

	@Column(name = "promo_code", unique = true, nullable = false, length = 50)
	public String getPromoCode() {
		return this.promoCode;
	}

	public void setPromoCode(String promoCode) {
		this.promoCode = promoCode;
	}

	@Column(name = "name", nullable = false, length = 80)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "description", nullable = false, length = 16777215)
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Column(name = "netsuite_campaign_id")
	public Long getNetsuiteCampaignId() {
		return this.netsuiteCampaignId;
	}

	public void setNetsuiteCampaignId(Long netsuiteCampaignId) {
		this.netsuiteCampaignId = netsuiteCampaignId;
	}

	@Column(name = "type", nullable = false, length = 6)
	public String getType() {
		return this.type;
	}

	public void setType(String type) {
		this.type = type;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "start_date", nullable = false, length = 0)
	public Date getStartDate() {
		return this.startDate;
	}

	public void setStartDate(Date startDate) {
		this.startDate = startDate;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "expire_date", nullable = false, length = 0)
	public Date getExpireDate() {
		return this.expireDate;
	}

	public void setExpireDate(Date expireDate) {
		this.expireDate = expireDate;
	}

	@Column(name = "is_stackable", nullable = false)
	public boolean isIsStackable() {
		return this.isStackable;
	}

	public void setIsStackable(boolean isStackable) {
		this.isStackable = isStackable;
	}

	@Column(name = "new_business_only", nullable = false)
	public boolean isNewBusinessOnly() {
		return this.newBusinessOnly;
	}

	public void setNewBusinessOnly(boolean newBusinessOnly) {
		this.newBusinessOnly = newBusinessOnly;
	}

	@Column(name = "term_in_months")
	public Integer getTermInMonths() {
		return this.termInMonths;
	}

	public void setTermInMonths(Integer termInMonths) {
		this.termInMonths = termInMonths;
	}

	@Column(name = "force_prepay", nullable = false)
	public boolean isForcePrepay() {
		return this.forcePrepay;
	}

	public void setForcePrepay(boolean forcePrepay) {
		this.forcePrepay = forcePrepay;
	}

	@Column(name = "prepay_percent", nullable = false, precision = 5)
	public BigDecimal getPrepayPercent() {
		return this.prepayPercent;
	}

	public void setPrepayPercent(BigDecimal prepayPercent) {
		this.prepayPercent = prepayPercent;
	}

	@Column(name = "min_users", nullable = false)
	public int getMinUsers() {
		return this.minUsers;
	}

	public void setMinUsers(int minUsers) {
		this.minUsers = minUsers;
	}

	@Column(name = "max_users")
	public Integer getMaxUsers() {
		return this.maxUsers;
	}

	public void setMaxUsers(Integer maxUsers) {
		this.maxUsers = maxUsers;
	}

	@Column(name = "one_time_price", nullable = false, precision = 10)
	public BigDecimal getOneTimePrice() {
		return this.oneTimePrice;
	}

	public void setOneTimePrice(BigDecimal oneTimePrice) {
		this.oneTimePrice = oneTimePrice;
	}

	@Column(name = "mrc_price", nullable = false, precision = 10)
	public BigDecimal getMrcPrice() {
		return this.mrcPrice;
	}

	public void setMrcPrice(BigDecimal mrcPrice) {
		this.mrcPrice = mrcPrice;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created", nullable = false, length = 0)
	public Date getCreated() {
		return this.created;
	}

	public void setCreated(Date created) {
		this.created = created;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "updated", nullable = false, length = 0)
	public Date getUpdated() {
		return this.updated;
	}

	public void setUpdated(Date updated) {
		this.updated = updated;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "promoCode")
	public Set<PromoKit> getPromoKits() {
		return this.promoKits;
	}

	public void setPromoKits(Set<PromoKit> promoKits) {
		this.promoKits = promoKits;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "promoCode")
	public Set<PromoRole> getPromoRoles() {
		return this.promoRoles;
	}

	public void setPromoRoles(Set<PromoRole> promoRoles) {
		this.promoRoles = promoRoles;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "promoCode")
	public Set<PromoAction> getPromoActions() {
		return this.promoActions;
	}

	public void setPromoActions(Set<PromoAction> promoActions) {
		this.promoActions = promoActions;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "promoCode")
	public Set<PromoDeployment> getPromoDeployments() {
		return this.promoDeployments;
	}

	public void setPromoDeployments(Set<PromoDeployment> promoDeployments) {
		this.promoDeployments = promoDeployments;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "promoCode")
	public Set<OrderDiscount> getOrderDiscounts() {
		return this.orderDiscounts;
	}

	public void setOrderDiscounts(Set<OrderDiscount> orderDiscounts) {
		this.orderDiscounts = orderDiscounts;
	}

}
