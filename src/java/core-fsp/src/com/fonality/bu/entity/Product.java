package com.fonality.bu.entity;

// Generated Mar 21, 2013 12:26:07 PM by Hibernate Tools 3.4.0.CR1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

/**
 * Product generated by hbm2java
 */
@Entity
@Table(name = "product", catalog = "fcs", uniqueConstraints = {
		@UniqueConstraint(columnNames = "deployment_id"),
		@UniqueConstraint(columnNames = "name") })
public class Product implements java.io.Serializable {

	private Integer productId;
	private Deployment deployment;
	private String name;
	private String description;
	private Date created;
	private Date updated;
	private Set<BundleRelationship> bundleRelationships = new HashSet<BundleRelationship>(
			0);
	private Set<OrderGroup> orderGroups = new HashSet<OrderGroup>(0);
	private Set<OrderCategory> orderCategories = new HashSet<OrderCategory>(0);

	public Product() {
	}

	public Product(Deployment deployment, String name, String description,
			Date created, Date updated) {
		this.deployment = deployment;
		this.name = name;
		this.description = description;
		this.created = created;
		this.updated = updated;
	}

	public Product(Deployment deployment, String name, String description,
			Date created, Date updated,
			Set<BundleRelationship> bundleRelationships,
			Set<OrderGroup> orderGroups, Set<OrderCategory> orderCategories) {
		this.deployment = deployment;
		this.name = name;
		this.description = description;
		this.created = created;
		this.updated = updated;
		this.bundleRelationships = bundleRelationships;
		this.orderGroups = orderGroups;
		this.orderCategories = orderCategories;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "product_id", unique = true, nullable = false)
	public Integer getProductId() {
		return this.productId;
	}

	public void setProductId(Integer productId) {
		this.productId = productId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "deployment_id", unique = true, nullable = false)
	public Deployment getDeployment() {
		return this.deployment;
	}

	public void setDeployment(Deployment deployment) {
		this.deployment = deployment;
	}

	@Column(name = "name", unique = true, nullable = false, length = 80)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "description", nullable = false, length = 16777215)
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created", nullable = false, length = 0)
	public Date getCreated() {
		return this.created;
	}

	public void setCreated(Date created) {
		this.created = created;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "updated", nullable = false, length = 0)
	public Date getUpdated() {
		return this.updated;
	}

	public void setUpdated(Date updated) {
		this.updated = updated;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "product")
	public Set<BundleRelationship> getBundleRelationships() {
		return this.bundleRelationships;
	}

	public void setBundleRelationships(
			Set<BundleRelationship> bundleRelationships) {
		this.bundleRelationships = bundleRelationships;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "product")
	public Set<OrderGroup> getOrderGroups() {
		return this.orderGroups;
	}

	public void setOrderGroups(Set<OrderGroup> orderGroups) {
		this.orderGroups = orderGroups;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "product")
	public Set<OrderCategory> getOrderCategories() {
		return this.orderCategories;
	}

	public void setOrderCategories(Set<OrderCategory> orderCategories) {
		this.orderCategories = orderCategories;
	}

}
